name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: windows
            bundles: nsis
            extra_args: --config src-tauri/tauri.windows.conf.json
          - os: windows-latest
            name: windows-store
            bundles: nsis
            extra_args: --config src-tauri/tauri.microsoftstore.conf.json
          - os: macos-15-intel
            name: macos
            bundles: dmg,app
            extra_args: --target x86_64-apple-darwin --config src-tauri/tauri.macos.conf.json
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            app/src-tauri -> app/src-tauri/target

      - name: Install deps (app)
        working-directory: app
        shell: bash
        run: npm ci --no-audit --no-fund

      - name: Build and release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: app
          tagName: v__VERSION__
          releaseName: Free FPS v__VERSION__
          releaseBody: |
            Downloads:
            - Windows portable: `free-fps.exe`
            - Windows installer \(NSIS\): `Free.FPS_x64-setup_windows.exe`
            - Windows installer \(NSIS, Store\): `Free.FPS_x64-setup_windows_store.exe`
            - macOS Intel: `Free.FPS_x64_darwin.dmg`
          releaseDraft: false
          prerelease: false
          args: --bundles ${{ matrix.bundles }} ${{ matrix.extra_args }}

      - name: Attach portable exe (Windows)
        if: matrix.name == 'windows'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: app/src-tauri/target/release/*.exe
          tag_name: ${{ github.ref_name }}
          fail_on_unmatched_files: true

      - name: Prepare Store EXE name
        if: matrix.name == 'windows-store'
        shell: bash
        run: |
          set -euo pipefail
          dir="app/src-tauri/target/release/bundle/nsis"
          if [ ! -d "$dir" ]; then
            echo "NSIS bundle dir not found: $dir"
            ls -R app/src-tauri/target/release || true
            exit 1
          fi
          FILE="$(find "$dir" -maxdepth 1 -type f -name "*-setup.exe" | head -n1 || true)"
          if [ -z "${FILE:-}" ]; then
            echo "NSIS installer not found in $dir"
            ls -al "$dir" || true
            exit 1
          fi
          cp "$FILE" "$dir/Free.FPS_x64-setup_windows_store.exe"

      - name: Attach Microsoft Store installer (Windows)
        if: matrix.name == 'windows-store'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: app/src-tauri/target/release/bundle/nsis/Free.FPS_x64-setup_windows_store.exe
          tag_name: ${{ github.ref_name }}
          fail_on_unmatched_files: true
