name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-14, macos-13, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0
          cache: npm
          cache-dependency-path: app/package-lock.json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Node deps (app)
        working-directory: app
        shell: bash
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build and release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: app
          tagName: v__VERSION__
          releaseName: Free FPS v__VERSION__
          releaseBody: "Automated release built by CI."
          releaseDraft: false
          prerelease: false

      - name: Rename portable exe (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $pkg = Get-Content 'app/package.json' -Raw | ConvertFrom-Json
          $version = $pkg.version
          $arch = if ($env:PROCESSOR_ARCHITECTURE -eq 'ARM64') { 'arm64' } else { 'x64' }
          $src = 'app\src-tauri\target\release\free-fps.exe'
          if (-not (Test-Path $src)) { throw "Portable exe not found: $src" }
          $dstName = "Free.FPS_${version}_${arch}_portable.exe"
          $dst = Join-Path 'app\src-tauri\target\release' $dstName
          Move-Item -Path $src -Destination $dst -Force
          echo "PORTABLE_PATH=$dst" >> $env:GITHUB_ENV

      - name: Attach portable exe (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.PORTABLE_PATH }}
          tag_name: ${{ github.ref_name }}
          fail_on_unmatched_files: true
